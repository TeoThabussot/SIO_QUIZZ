{% extends 'base.html.twig' %}

{% block title %}Hello HomeController!{% endblock %}

{% block body %}

<style>

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');


* {

    margin: 0;
    padding: 0;
    font-family: 'Inter', sans-serif;
}

#container {


    box-sizing: border-box;

    display: flex;
    align-items: center;
    justify-content: center;

    flex-wrap: wrap;

    width: 100%;
    min-height: 100vh;

    gap: 2rem;
    padding: 2rem;

    background: linear-gradient(184deg,#8754ff,#8E2DE2);


}

.themeContainer {

    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: center;

    gap: 1rem;

    border-radius: 1rem;

    background-color: #ffffff;

    height: 15rem;
    width: 30rem;

    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);

}

.themeContainer:hover {

    height: 16rem;
    width: 31rem;

    cursor: pointer;


}

.themeButton {

    font-size: 1.3rem;
    background-color: #8754ff;
    color: #ffffff;
    padding: 1.4rem 3.4rem;
    border-radius: 0.3rem;
    float: right;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    border: none;
}

.button {

    font-size: 1.3rem;
    background-color: #ffffff;
    color: #000000;
    padding: 1.4rem 3.4rem;
    border-radius: 0.3rem;
    float: right;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    border: none;
}

.themeButton:hover, .button:hover {

    filter: brightness(0.9);
    cursor: pointer;
}

.themeButton:active, .button:active {

    filter: brightness(0.8);

}

.themeTitle {

    font-size: 2rem;

}

#questionInput {
    -webkit-appearance: none;
    width: 30%;
    height: 12px;
    background: #121212;
    outline: none;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
    border-radius: 50px;

    margin: 0 auto;

}

#questionInput:hover {
    opacity: 1;
}

#questionInput::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 25px;
    height: 25px;
    background: #8754ff;
    cursor: pointer;
    border-radius: 50%;
}

#questionInput::-moz-range-thumb {
    width: 25px;
    height: 25px;
    background: #8754ff;
    cursor: pointer;
    border-radius: 50%;
}

.subContainer {

    display: flex;
    justify-content: center;
    align-content: center;
    flex-direction: column;

    gap: 3rem;
    background-color: #ffffff;
    padding: 3.1em 1.8em;
    width: 80%;
    max-width: 37.5em;
    border-radius: 0.6em;

}

.title {

    margin-bottom: 1.25em;
    font-weight: 600;

}

.questionsContainer > button {

    font-size: 0.9em;
    width: 100%;
    padding: 1em;
    margin: 0.3em 0;
    text-align: left;
    outline: none;
    background: transparent;
    border: 1px solid #c0bfd2;
    border-radius: 0.3em;

}

.questionsContainer > button:hover {

    cursor: pointer;
    background-color: #e1f5fe;

}

.inputText {

    font-size: 1.25rem;
    margin: 0 auto;

}

</style>


<div id="container">

    


</div>

<script type="module">

    const anwsers = [];

    const questionsReponses = new Map();

    const container = document.getElementById("container");

    async function getThemes() {

        const response = await fetch("/api/themes/get");
        return await response.json();

    } 

    const themes = await getThemes();

    themes.forEach(theme => {


        const nbQuestions = theme.nbQuestions;

        const themeContainer = document.createElement("div");
        const themeButton = document.createElement("button");
        const themeTitle = document.createElement("h2");

        themeContainer.classList.add("themeContainer")
        themeButton.classList.add("themeButton");
        themeTitle.classList.add("themeTitle")

        themeTitle.innerText = theme.libelle;
        themeButton.innerText = "Démarer"

        themeButton.addEventListener("click", ev => {

            container.innerHTML = "";

            const subContainer = document.createElement("div");
            subContainer.classList.add("subContainer");

            const p = document.createElement("p");
            p.classList.add("inputText");
            p.innerText = "Nombre de questions : " + "1";


            const input = document.createElement("input");
            input.type = "range";
            input.defaultValue = "1"
            input.min = "1";
            input.max = nbQuestions;
            input.id = "questionInput";

            input.addEventListener("input", ev => {

                p.innerText = "Nombre de questions : " + ev.target.value;

            })

            const button = document.createElement("button");
            button.innerText = "Démarer le Quiz";
            button.classList.add("button")

            subContainer.append(p, input, button)
            container.append(subContainer);




            button.addEventListener("click", async (ev) => {

                const nbrQuestions = parseInt(input.value);

                container.innerHTML = "";

                const response = await fetch("api/quizz/get/" + theme.id + "/" + nbrQuestions );


                const questions = await response.json();

                for (const question of questions) {

                    const response = await fetch("/api/question/responses/get/" + question.id);

                    const reponses = await response.json();


                    questionsReponses.set(question, reponses);


                }

                const subContainer = document.createElement("div");
                subContainer.classList.add("subContainer");


                const title = document.createElement("p");
                title.classList.add("title");

                const questionsContainer = document.createElement("div");
                questionsContainer.classList.add("questionsContainer");

                async function test(number) {

                    questionsContainer.innerHTML = "";

                    title.innerText = number + 1 + " - " + questions[number].libelle

                    questionsReponses.get(questions[number]).forEach(reponse => {

                        const reponseDom = document.createElement("button")
                        reponseDom.innerText = reponse.libelle

                        reponseDom.addEventListener("click", async (ev) => {

                            anwsers.push(reponse.id);

                            if (number + 1 !== nbrQuestions) {

                                await test(number + 1);

                            } else {

                                container.innerHTML = "";

                                const goodAnwsers = await fetch(

                                    "/api/question/responses/post",
                                    {method: "POST", body: JSON.stringify(anwsers)}

                                )

                                const result = await goodAnwsers.text()

                                const text = document.createElement("h1");

                                text.innerText = "Score : " + result + " / " + anwsers.length;

                                container.append(text);

                            }
                        })

                        questionsContainer.append(reponseDom);
                    })

                }

                test(0);

                subContainer.append(title, questionsContainer)
                container.append(subContainer);

            })

        })


        container.append(themeContainer);
        themeContainer.append(themeTitle, themeButton)
    })

</script>

{% endblock %}
